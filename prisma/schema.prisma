generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "cockroachdb"
  url          = env("COCKROACH_DB_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String? 
  expires_at        Int?
  id_token          String? 
  provider          String
  refresh_token     String? 
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Item {
  id           String     @id @default(cuid())
  name         String
  src          String     
  price        Float
  alt          String
  stock        Int
  description  String    
  length       Float
  width        Float
  height       Float
  weight       Float
  discontinued Boolean
  category     String
  CartItem     CartItem[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  Account       Account[]
  Session       Session[]
  Cart          Cart?
}

model Cart {
  id     String     @id @default(uuid())
  userId String
  items  CartItem[]
  User   User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model CartItem {
  id       String @id @default(cuid())
  itemId   String
  item     Item   @relation(fields: [itemId], references: [id])
  quantity Int
  Cart     Cart   @relation(fields: [cartId], references: [id])
  cartId   String

  @@index([cartId])
  @@index([itemId])
  @@unique([cartId, itemId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
